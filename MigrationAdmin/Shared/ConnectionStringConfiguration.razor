@using Microsoft.AspNetCore.Components
@using Migration.Repository
@using Migration.Infrastructure.CosmosDb
@inject IStorage<DBSettings> LocalStorageDbSettings;

@if (DBSettingsModel != null)
{
    <div class="card card-info">
        <div class="card-header">
            <h3 class="card-title">Data base details - @Title</h3>
            <div class="card-tools">
                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="card-body" style="display: block;">
            <div class="row">
                <div class="col-sm-1">
                    <div class="form-group">
                        <label>Connection Type</label>
                        <select class="form-control" id="connTypes" data-keeper-edited="yes" value="@ConnectionType" @onchange="ChangeConnectionType">
                            @foreach (var type in ConnectionTypes)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            @if (DBSettingsModel.DbType == DbType.Cosmos)
            {
                <div class="row">
                    <div class="col-sm-1">
                        <div class="form-group">
                            <label>Connection Name</label>
                            <input class="form-control" id="url" data-keeper-edited="yes" @bind="@DBSettingsModel.Name" />
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>Endpoint</label>
                            <input class="form-control" id="url" data-keeper-edited="yes" @bind="@DBSettingsModel.Endpoint" />
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>Primary Key</label>
                            <input class="form-control" id="primaryKey" data-keeper-edited="yes" @bind="@DBSettingsModel.AuthKey" />
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label>Database</label>
                            <input class="form-control" id="container" data-keeper-edited="yes" @bind="@Database" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>Connection String</label>
                            <input class="form-control" id="container" data-keeper-edited="yes" @bind="@DBSettingsModel.ConnectionString" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>Container</label>
                            <input class="form-control" id="collection" data-keeper-edited="yes" @bind="@DBSettingsModel.Container" />
                        </div>
                    </div>
                </div>
            }
            <div class="card-footer">
                <button class="btn btn-success" @onclick="() => TestConnection(DBSettingsModel)">Test and Save Connection</button>
            </div>
        </div>
    </div>

    <div class="card card-info">
        <div class="card-header">
            <h3 class="card-title">Update records in Batch</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Select the Connection string you want to update</label>
                        <select class="form-control" id="connectionString" data-keeper-edited="yes" @onchange="ChangeConnectionString">
                            @foreach (var connectionString in ConnectionsSettings)
                            {
                                <option value="@connectionString.Database">@connectionString.Name - @connectionString.Database</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Select the Container</label>
                        <select class="form-control" id="connectionString" data-keeper-edited="yes" @onchange="ChangeContainer">
                            <option selected="selected" value="@DBSettingsModel.ListOfContainer.FirstOrDefault()"> @DBSettingsModel.ListOfContainer.FirstOrDefault()</option>
                            @foreach (var container in DBSettingsModel.ListOfContainer.Skip(1))
                            {
                                <option value="@container">@container</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (IsLoading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

@if (ShowModal)
{
    <ResultModal Error="Error" Message="@Message" ModalTitle="Connection Result" ModalOk="ModalOk"></ResultModal>
}

@code {
    [Parameter]
    public string Database { get; set; }

    [Parameter]
    public string Title { get; set; }

    public DBSettings DBSettingsModel { get; set; } = new();

    public List<DBSettings> ConnectionsSettings { get; set; } = new();

    public string Message { get; set; }
    private string? ConnectionType { get; set; }
    private bool Error { get; set; }
    public bool ShowModal { get; set; }
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<DBSettings> OnDbSettingsChanged { get; set; }

    private List<DbType> ConnectionTypes { get; set; } = new()
    {
        DbType.Cosmos,
        DbType.TableStorage
    };

    public string DatabaseName { get; set; }


    public class CosmosTable
    {
        public string Name { get; set; }
        public List<string> Properties { get; set; }
    }

    public void ModalOk()
    {
        ShowModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConnectionsSettings = await LocalStorageDbSettings.GetAll();
            ConnectionsSettings ??= new();

            if (!ConnectionsSettings.Any()) return;

            DatabaseName = ConnectionsSettings.FirstOrDefault()?.Database;


            DBSettingsModel.ListOfContainer = ConnectionsSettings.FirstOrDefault().ListOfContainer;

            await OnDbSettingsChanged.InvokeAsync(ConnectionsSettings.FirstOrDefault());
        }
        catch
        {

        }
    }

    public async Task ChangeConnectionString(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        DatabaseName = e.Value.ToString();

        if (string.IsNullOrEmpty(DatabaseName)) return;

        var settings = await LocalStorageDbSettings.Get(w => w.Database == DatabaseName);

        DBSettingsModel.ListOfContainer = settings.ListOfContainer;

        await OnDbSettingsChanged.InvokeAsync(settings);
    }

    public async Task ChangeContainer(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        var settings = await LocalStorageDbSettings.Get(w => w.Database == DatabaseName);

        if (settings == null) return;

        settings.Container = e.Value.ToString();

        await OnDbSettingsChanged.InvokeAsync(settings);
    }


    public void ChangeConnectionType(ChangeEventArgs e)
    {
        ConnectionType = e.Value.ToString();
    }

    public async Task TestConnection(DBSettings settings)
    {
        IsLoading = true;
        try
        {
            DataSettings result = new();

            //if (settings.DbTpe == DbType.Cosmos)
            //{
            settings.Database = Database;
            var dataSettings = new DataSettings() // TODO:move to the Data Settings
            {
                Parameters = new List<CustomAttributes>()
                {
                    new() { Key = "Endpoint", Value = settings.Endpoint },
                    new() { Key = "AuthKey", Value = settings.AuthKey },
                    new() { Key = "Database", Value = settings.Database }
                },
                Name = settings.Name
            };

            result = await new CosmosDbConnection(dataSettings).Test();

            //}
            //else
            //{
            //    //  result = await new CosmosDbConnection().TestTableStorage(settings);
            //}

            if (result.Entities.Any())
            {
                settings.Container = result.Entities.FirstOrDefault().Name;

                ConnectionsSettings = await LocalStorageDbSettings.GetAll();

                ConnectionsSettings ??= new();

                ConnectionsSettings.RemoveAll(s => s.Database == Database);

                ConnectionsSettings.Add(settings);

                DBSettingsModel = new();

                DBSettingsModel.ListOfContainer = settings.ListOfContainer;

                await LocalStorageDbSettings.Add(ConnectionsSettings);

                await OnDbSettingsChanged.InvokeAsync(settings);

                Error = false;
                Message = $"Connected to {ConnectionType}";
            }
        }
        catch (Exception e)
        {
            Error = true;
            Message = $"Error to connect to {ConnectionType}. Details: {e.Message}";
        }

        ShowModal = true;
        IsLoading = false;
    }
}
