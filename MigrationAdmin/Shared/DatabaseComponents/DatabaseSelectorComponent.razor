@using Migration.Repository
@inject IStorage<DataSettings> _storageDataSettings;

<div class="row">
    <div class="col-sm-6">
        <div class="form-group">
            <label>Select the Connection </label>
            <select class="form-control" id="connectionString" data-keeper-edited="yes" @onchange="ChangeConnectionString">
                @if (_connectionStrings != null)
                {
                    foreach (var connectionString in _connectionStrings.Where(w => !string.IsNullOrEmpty(w.Value)))
                    {
                        <option value="@connectionString.Value">@connectionString.Key</option>
                    }
                }
            </select>
        </div>
    </div>
    @if (DataSettings.ConnectionType != ConnectionType.File)
    {
        <div class="col-sm-6">
            <div class="form-group">
                <label>Select the Container</label>
                <select class="form-control" id="entities" data-keeper-edited="yes" @onchange="ChangeEntity">
                    @if (DataSettings != null)
                    {
                        <option selected="selected" value="@DataSettings.Entities.FirstOrDefault()"> @DataSettings.Entities.FirstOrDefault()</option>
                        @foreach (var container in DataSettings.Entities.Skip(1))
                        {
                            <option value="@container">@container</option>
                        }
                    }
                </select>
            </div>
        </div>
    }
    else
    {
        <div class="col-sm-2">
            <div class="form-group">
                <label>Entity</label>
                <input class="form-control" id="profileName" data-keeper-edited="yes" @bind="@DataSettings.CurrentEntity" />
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public EventCallback<DataSettings> OnDbSettingsChanged { get; set; }

    [Parameter]
    public DataSettings DataSettings { get; set; } = new();

    private string _connectionName { get; set; }

    private Dictionary<string, string?> _connectionStrings;

    protected override async Task OnInitializedAsync()
    {
        var data = await _storageDataSettings.GetAll();

        if (data != null && data.Any())
        {
            _connectionStrings = data.ToDictionary(k => k.FullName, v => v.FullName);
            DataSettings = data.FirstOrDefault();
            _connectionName = DataSettings.Name;
        }
    }

    public async Task ChangeConnectionString(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        _connectionName = e.Value.ToString();

        if (string.IsNullOrEmpty(_connectionName)) return;

        var settings = await _storageDataSettings.Get(w => w.FullName == _connectionName);

        DataSettings.Entities = settings.Entities;

        await OnDbSettingsChanged.InvokeAsync(settings);
    }

    public async Task ChangeEntity(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        var settings = await _storageDataSettings.Get(w => w.FullName == _connectionName);

        if (settings == null) return;

        settings.CurrentEntity = e.Value.ToString();

        await OnDbSettingsChanged.InvokeAsync(settings);
    }
}