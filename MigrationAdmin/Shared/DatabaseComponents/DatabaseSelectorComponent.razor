@using Migration.Repository
@using Migration.Infrastructure.Redis.Entities
@using Migration.Infrastructure.Redis
@inject IRepository<DataSettings> _redis;

<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">@Title</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body" style="display: block;">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Select the Connection </label>
                    <select class="form-control" id="connectionString" data-keeper-edited="yes" value="@_connectionName" @onchange="ChangeConnectionString">
                        @if (ConnectionStrings != null)
                        {
                            foreach (var connectionString in ConnectionStrings.Where(w => !string.IsNullOrEmpty(w.Value)))
                            {
                                <option value="@connectionString.Value">@connectionString.Key</option>
                            }
                        }
                    </select>
                </div>
            </div>
            @if (DataSettings != null)
            {
                if (DataSettings.ConnectionType != ConnectionType.File)
                {
                    if (!NewContainer)
                    {
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Select the Container</label>
                                <select class="form-control" id="entities" data-keeper-edited="yes" value="@DataSettings.CurrentEntity" @onchange="ChangeEntity">
                                    @if (DataSettings != null)
                                    {
                                        @foreach (var container in DataSettings.Entities)
                                        {
                                            <option value="@container">@container</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label>New Entity</label>
                                <input class="form-control" id="profileName" data-keeper-edited="yes" @bind="@DataSettings.CurrentEntity" />
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label>Entity</label>
                            <input class="form-control" id="profileName" data-keeper-edited="yes" @bind="@DataSettings.CurrentEntity" />
                        </div>
                    </div>
                }
            }
        </div>
        @if (DisplayQuery)
        {
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label>Query (Format: select c.Field1,c.Field2,c.Field3,c.Field4 from c where c.Field1 = value) or (select * from c where c.Field1 = value)</label>
                        <input class="form-control" id="query" data-keeper-edited="yes" @bind="@Query" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <button class="btn btn-default" @onclick="() => AddQuery()"> Add Query</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code {

    [Parameter]
    public EventCallback<DataSettings> OnDbSettingsChanged { get; set; }

    [Parameter]
    public DataSettings DataSettings { get; set; } = new();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<string> OnQueryAdded { get; set; }

    [Parameter]
    public string Query { get; set; }

    [Parameter]
    public bool NewContainer { get; set; }

    [Parameter]
    public Dictionary<string, string?> ConnectionStrings { get; set; }

    [Parameter]
    public bool DisplayQuery { get; set; }

    private string _connectionName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (DataSettings == null)
        {
            var redisData = await _redis.FindAsync();

            DataSettings = redisData.FirstOrDefault();
        }
        // var redisData = await _redis.FindAsync(typeof(DataSettings).Name);

        // var dataSettings = redisData.Select(s => s.Data).ToList();

        // if (dataSettings != null && dataSettings.Any())
        // {
        //     ConnectionStrings = dataSettings.ToDictionary(k => k.FullName, v => v.FullName);
        //     DataSettings = dataSettings.FirstOrDefault();
        _connectionName = DataSettings.FullName;

        if (string.IsNullOrEmpty(DataSettings.CurrentEntity))
            DataSettings.CurrentEntity = DataSettings.Entities.FirstOrDefault();

        //     await OnDbSettingsChanged.InvokeAsync(DataSettings);
        // }

    }

    public async Task ChangeConnectionString(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        _connectionName = e.Value.ToString();

        if (string.IsNullOrEmpty(_connectionName)) return;

        var dataSettings = await GetDataSettings();

        dataSettings.CurrentEntity = dataSettings.Entities.FirstOrDefault();

        DataSettings.Entities = dataSettings.Entities;

        DataSettings.CurrentEntity = DataSettings.Entities.FirstOrDefault();

        await OnDbSettingsChanged.InvokeAsync(dataSettings);
    }

    private async Task<DataSettings?> GetDataSettings()
    {
        var redisData = await _redis.FindAsync(_connectionName, string.Empty);

        var dataSettings = redisData.FirstOrDefault();
        return dataSettings;
    }

    public async Task ChangeEntity(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        if (DataSettings == null) return;

        DataSettings.CurrentEntity = e.Value.ToString();

        await OnDbSettingsChanged.InvokeAsync(DataSettings);
    }

    public async Task AddQuery()
    {
        await OnQueryAdded.InvokeAsync(Query);
    }
}