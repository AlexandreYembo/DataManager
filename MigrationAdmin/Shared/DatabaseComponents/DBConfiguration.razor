@using Migration.Repository;
@inherits CustomComponents
@inject Func<DBSettings, ITestConnection> _testConnection;
@inject IStorage<DBSettings> _storageDbSettings;

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Configure a new connection string</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body" style="display: block;">
        @switch (DBSettings.DbType)
        {
            case DbType.Cosmos:
                <CosmosDBConfiguration DBSettings="DBSettings"></CosmosDBConfiguration>
                break;
            case DbType.TableStorage:
                <TableStorageConfiguration></TableStorageConfiguration>
                break;
        }
        <div class="card-footer">
            <button class="btn btn-success" @onclick="() => TestConnection()">Test and Save Connection</button>
        </div>
    </div>
</div>
@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

@if (ShowModal)
{
    <ResultModal Error="@_error" Message="@_message" ModalTitle="Connection Result" ModalOk="ModalOk"></ResultModal>
}

@code {
    [Parameter]
    public DBSettings DBSettings { get; set; } = new();

    [Parameter]
    public EventCallback<DBSettings> OnConnectionSuccessfully { get; set; }

    private bool _error;

    private string _message;

    private bool _loading;

    private async Task TestConnection()
    {
        _loading = true;

        try
        {
            var settings = await _storageDbSettings.GetAll();

            settings ??= new();

            settings.RemoveAll(s => s.Database == DBSettings.Database);

            settings.Add(DBSettings);


            DBSettings = await _testConnection(DBSettings).Test();
            _error = false;
            _message = "Connected to Cosmos DB";

            await _storageDbSettings.Add(settings);

            await OnConnectionSuccessfully.InvokeAsync(DBSettings);

            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _message = $"Error to connect to Cosmos DB. Details: {e.Message}";
        }

        _loading = false;
        ShowModal = true;
    }


}