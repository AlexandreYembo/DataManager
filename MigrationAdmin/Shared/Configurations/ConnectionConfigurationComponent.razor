@using Microsoft.AspNetCore.Components
@using Migration.Repository
@using InputFile = Microsoft.AspNetCore.Components.Forms.InputFile
@inherits CustomComponents
@inject Func<DataSettings, ITestConnection> _testConnection;
@inject IStorage<DataSettings> _storageDbSettings;
<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Configure a new connection string</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body" style="display: block;">
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Connection Type</label>
                    <select class="form-control" id="container" data-keeper-edited="yes" value="@DataSettings.ConnectionType" @onchange="ChangeConnectionType">
                        @foreach (var container in Enum.GetValues<ConnectionType>())
                        {
                            <option value="@container">@container</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Connection Name</label>
                    <input class="form-control" id="name" data-keeper-edited="yes" @bind="@DataSettings.Name" />
                </div>
            </div>
        </div>
        @if (DataSettings.AllowAddCustomParameters)
        {
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <button class="btn btn-success" @onclick="() => AddParameter()">+</button>
                    </div>
                </div>
            </div>
            @foreach (var par in DataSettings.Parameters)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <input class="form-control" id="parKey" data-keeper-edited="yes" @bind="@par.Key" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <input class="form-control" id="parValue" data-keeper-edited="yes" @bind="@par.Value" />
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            if (DataSettings.ConnectionType == ConnectionType.File)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <label for="exampleInputFile">File input</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <InputFile type="file" class="custom-file-input" OnChange="OnFileInput"></InputFile>
                                @if (_uploadedFile != null && !string.IsNullOrEmpty(_uploadedFile.Name))
                                {
                                    <label class="custom-file-label">@_uploadedFile.Name</label>
                                }
                                else
                                {
                                    <label class="custom-file-label">Choose file</label>
                                }
                                </div>
                                <div class="input-group-append">
                                    <button class="btn btn-default" @onclick="HandleFileUpload">Upload</button>
                                </div>
                            </div>
                        </div>
                    </div>
            }
            else
            {
                foreach (var par in DataSettings.Parameters)
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label>@par.Key</label>
                                <input class="form-control" id="parValue" data-keeper-edited="yes" @bind="@par.Value" />
                            </div>
                        </div>
                    </div>
                }
            }
        }
        @if (DataSettings.ConnectionType != ConnectionType.File)
        {
            <div class="card-footer">
                <button class="btn btn-success" @onclick="() => TestConnection()">Test and Save Connection</button>
            </div>
        }
    </div>
</div>

@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

@if (ShowModal)
{
    <ResultModalComponent Error="@_error" Message="@_message" ModalTitle="Connection Result" ModalOk="ModalOk"></ResultModalComponent>
}

@code {
    [Parameter]
    public DataSettings DataSettings { get; set; } = new();

    [Parameter]
    public EventCallback<DataSettings> OnConnectionSuccessfully { get; set; }

    private bool _error;

    private string _message;

    private IBrowserFile _uploadedFile;

    private void AddParameter()
    {
        DataSettings.Parameters.Add(new CustomAttributes());
    }

    public void ChangeConnectionType(ChangeEventArgs e)
    {
        DataSettings.ConnectionType = Enum.Parse<ConnectionType>(e.Value.ToString());

        DataSettings.ChangeType();
    }

    private async Task TestConnection()
    {
        Loading = true;

        try
        {
            var settings = await _storageDbSettings.GetAll();

            DataSettings = await _testConnection(DataSettings).Test();
            _error = false;
            _message = "Connected to Cosmos DB";

            settings ??= new();

            settings.RemoveAll(s => s.FullName == DataSettings.FullName);

            settings.Add(DataSettings);

            await _storageDbSettings.Add(settings);

            await OnConnectionSuccessfully.InvokeAsync(DataSettings);

            StateHasChanged();
        }
        catch (Exception e)
        {
            _error = true;
            _message = $"Error to connect to Cosmos DB. Details: {e.Message}";
        }

        Loading = false;
        ShowModal = true;
    }

    private void OnFileInput(InputFileChangeEventArgs e)
    {
        _uploadedFile = e.File;
    }

    private async Task HandleFileUpload()
    {
        {
            Directory.CreateDirectory("wwwroot/uploads");
        }

        var filePath = Path.Combine("wwwroot/uploads", _uploadedFile.Name); // Set the desired upload path

        try
        {
            var settings = await _storageDbSettings.GetAll();

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await _uploadedFile.OpenReadStream().CopyToAsync(stream);
            }

            DataSettings.Parameters.Add(new()
                {
                    Key = "FileName",
                    Value = filePath
                });

            settings ??= new();

            settings.RemoveAll(s => s.FullName == DataSettings.FullName);

            settings.Add(DataSettings);

            await _storageDbSettings.Add(settings);

            await OnConnectionSuccessfully.InvokeAsync(DataSettings);

            StateHasChanged();
        }
        catch
        {

        }
    }
}