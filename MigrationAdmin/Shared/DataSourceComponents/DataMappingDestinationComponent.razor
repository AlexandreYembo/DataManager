@using Migration.Repository.Models
@using Migration.Repository
@inject IJSRuntime jsRuntime
<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Mapping configuration</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-2">
                <label>Mapping Type</label>
                <select class="form-control" data-keeper-edited="yes" value="@_dataFieldsMapping.MappingType" @onchange="ChangeMappingType">
                    <option selected="selected">Select</option>
                    @foreach (var mappingType in Enum.GetValues<MappingType>())
                    {
                        <option value="@mappingType">@mappingType</option>
                    }
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @if (_dataFieldsMapping.MappingType != null)
                {
                    @if (DataMapping.OperationType == OperationType.Update || DataMapping.OperationType == OperationType.Import)
                    {
                        @switch (_dataFieldsMapping.MappingType)
                        {
                            case MappingType.TableJoin:
                                <TableJoinComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                    DataFieldsMapping="_dataFieldsMapping"></TableJoinComponent>
                                break;
                            case MappingType.MergeField:
                                <MergeFieldsComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                      DataFieldsMapping="_dataFieldsMapping"></MergeFieldsComponent>
                                break;
                            case MappingType.UpdateValue:
                                <UpdateValueComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                      DataFieldsMapping="_dataFieldsMapping"></UpdateValueComponent>
                                break;
                            case MappingType.MergeFieldWithCondition:
                                <MergeFieldValuesConditionComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                                    DataFieldsMapping="_dataFieldsMapping"></MergeFieldValuesConditionComponent>
                                break;
                            case MappingType.UpdateValueWithCondition:
                                <UpdateValueConditionComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                               DataFieldsMapping="_dataFieldsMapping"></UpdateValueConditionComponent>
                                break;
                        }
                    }
                    else
                    {
                        <TableJoinComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                            DataFieldsMapping="_dataFieldsMapping"></TableJoinComponent>
                    }
                }
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <MappingListComponent DataMapping="DataMapping"
                                      OnDataFieldsMappingEditing="(dataFieldsMapping) => _dataFieldsMapping = dataFieldsMapping "></MappingListComponent>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public DataMapping DataMapping { get; set; } = new();

    private DataFieldsMapping _dataFieldsMapping = new();

    [Parameter]
    public EventCallback<DataMapping> OnDataMappingChanged { get; set; }

    private string _querySource;
    private string _queryDestination;

    protected override void OnInitialized()
    {
        if (DataMapping.Source.Settings.CurrentEntity != null)
        {
            _dataFieldsMapping.SourceEntity = DataMapping.Source.Settings.CurrentEntity.Name;
        }

        if (DataMapping.Destination.Settings.CurrentEntity != null)
        {
            _dataFieldsMapping.DestinationEntity = DataMapping.Destination.Settings.CurrentEntity.Name;
        }
    }

    private void AddSourceDbSettings(DataSettings sourceSettings)
    {
        if (DataMapping.Source == null) DataMapping.Source = new();

        DataMapping.Source.Settings = sourceSettings;
    }

    private void AddDestinationDbSettings(DataSettings destinationSettings)
    {
        if (DataMapping.Destination == null) DataMapping.Destination = new();

        DataMapping.Destination.Settings = destinationSettings;
    }

    private void ChangeMappingType(ChangeEventArgs e)
    {
        _dataFieldsMapping = new();

        if (e.Value != null)
        {
            _dataFieldsMapping.MappingType = Enum.Parse<MappingType>(e.Value.ToString());
            _dataFieldsMapping.DestinationEntity = DataMapping.Destination.Settings.CurrentEntity.Name;
            _dataFieldsMapping.SourceEntity = DataMapping.Source.Settings.CurrentEntity.Name;
        }
    }

    private async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }

    private async Task AddFieldsMapping(DataFieldsMapping dataFieldMapping)
    {
        DataMapping.FieldsMapping.Remove(dataFieldMapping);
        DataMapping.FieldsMapping.Add(dataFieldMapping);
        _dataFieldsMapping = new DataFieldsMapping();
        await OnDataMappingChanged.InvokeAsync(DataMapping);
    }
}