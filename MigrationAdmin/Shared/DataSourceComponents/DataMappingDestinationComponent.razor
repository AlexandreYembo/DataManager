@using Migration.Repository.Models
@using Migration.Repository
@inject IJSRuntime jsRuntime

<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Select your Source</h3>
    </div>
    <div class="card-body">
        <DatabaseSelectorComponent OnDbSettingsChanged="(sourceDbSettings) => AddSourceDbSettings(sourceDbSettings)">
        </DatabaseSelectorComponent>
        <QueryFieldComponent OnQueryAdded="async (query) => await AddSourceQuery(query)">
        </QueryFieldComponent>
    </div>
</div>
<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Select your Destination</h3>
    </div>
    <div class="card-body">
        <DatabaseSelectorComponent OnDbSettingsChanged="(destinationDbSettings) => AddDestinationDbSettings(destinationDbSettings)">
        </DatabaseSelectorComponent>
        <QueryFieldComponent OnQueryAdded="async (query) => await AddDestinationQuery(query)">
        </QueryFieldComponent>
    </div>
</div>

<table id="dataMap" class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Mapping Type</th>
            <th>Operator Type</th>
            <th>Source</th>
            <th>Destination</th>
            <th>
                <button class="btn btn-success" @onclick="() => AddCommand()">+</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var destMap in DataMapping.FieldsMapping)
        {
            <tr>
                <td>
                    <select class="form-control" id="container" data-keeper-edited="yes" @bind="destMap.MappingType">
                        @foreach (var mappingType in Enum.GetValues<MappingType>())
                        {
                            <option value="@mappingType">@mappingType</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-control" id="container" data-keeper-edited="yes" @bind="destMap.OperatorType">
                        @foreach (var operatorType in Enum.GetValues<OperatorType>())
                        {
                            <option value="@operatorType">@operatorType</option>
                        }
                    </select>
                </td>
                <td>
                    <input class="form-control" id="command" data-keeper-edited="yes" @bind="@destMap.SourceField" />
                </td>
                <td>
                    <input class="form-control" id="command" data-keeper-edited="yes" @bind="@destMap.DestinationField" />
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => RemoveCommand(destMap)">-</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <button class="btn btn-default" @onclick="async () => await AddMapping()"> Add Mapping</button>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public DataMapping DataMapping { get; set; } = new();

    [Parameter]
    public EventCallback<DataMapping> OnDataMappingChanged { get; set; }

    private string _querySource;
    private string _queryDestination;

    public void AddCommand()
    {
        DataMapping.FieldsMapping.Add(new DataFieldsMapping());
    }

    private void RemoveCommand(DataFieldsMapping destMap)
    {
        DataMapping.FieldsMapping.Remove(destMap);
    }

    private void AddSourceDbSettings(DataSettings sourceSettings)
    {
        if (DataMapping.Source == null) DataMapping.Source = new();

        DataMapping.Source.Settings = sourceSettings;
    }

    private void AddDestinationDbSettings(DataSettings destinationSettings)
    {
        if (DataMapping.Destination == null) DataMapping.Destination = new();

        DataMapping.Destination.Settings = destinationSettings;
    }

    private async Task AddSourceQuery(string query)
    {
        await ShowSuccessAlert("Source Query added");

        if (DataMapping.Source == null) DataMapping.Source = new();

        DataMapping.Source.Query = query;
    }

    private async Task AddDestinationQuery(string query)
    {
        await ShowSuccessAlert("Destination Query added");

        if (DataMapping.Destination == null) DataMapping.Destination = new();

        DataMapping.Destination.Query = query;
    }

    private async Task AddMapping()
    {
        await ShowSuccessAlert("Mapping added");

        await OnDataMappingChanged.InvokeAsync(DataMapping);
    }

    public async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }
}