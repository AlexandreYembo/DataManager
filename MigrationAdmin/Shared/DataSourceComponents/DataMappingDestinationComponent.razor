@using Migration.Repository.Models
@using Migration.Repository
@inject IJSRuntime jsRuntime
<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Mapping configuration</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-2">
                <label>Operator Type</label>
                <select class="form-control" data-keeper-edited="yes" value="@_dataFieldsMapping.MappingType" @onchange="ChangeMappingType">
                    @foreach (var mappingType in Enum.GetValues<MappingType>())
                    {
                        <option value="@mappingType">@mappingType</option>
                    }
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @switch (_dataFieldsMapping.MappingType)
                {
                    case MappingType.TableJoin:
                        <TableJoinComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                            DataFieldsMapping="_dataFieldsMapping"></TableJoinComponent>
                        break;
                    case MappingType.FieldValueMerge:
                        <MergeFieldsComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                              DataFieldsMapping="_dataFieldsMapping"></MergeFieldsComponent>
                        break;
                    case MappingType.FieldValueMergeWithCondition:
                        <MergeFieldValuesConditionComponent OnDataFieldsMappingUpdated="(dataFieldMapping) =>AddFieldsMapping(dataFieldMapping)"
                                                            DataFieldsMapping="_dataFieldsMapping"></MergeFieldValuesConditionComponent>
                        break;
                    case MappingType.ValueWithCondition:
                        <UpdateValueConditionComponent OnDataFieldsMappingUpdated="(dataFieldMapping) => AddFieldsMapping(dataFieldMapping)"
                                                       DataFieldsMapping="_dataFieldsMapping"></UpdateValueConditionComponent>
                        break;
                }
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <MappingListComponent DataMapping="DataMapping"
                                      OnDataFieldsMappingEditing="(dataFieldsMapping) => _dataFieldsMapping = dataFieldsMapping "></MappingListComponent>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <button class="btn btn-default" @onclick="async () => await AddMapping()"> Add Mapping</button>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public DataMapping DataMapping { get; set; } = new();

    private DataFieldsMapping _dataFieldsMapping = new();

    [Parameter]
    public EventCallback<DataMapping> OnDataMappingChanged { get; set; }

    private string _querySource;
    private string _queryDestination;

    private void AddSourceDbSettings(DataSettings sourceSettings)
    {
        if (DataMapping.Source == null) DataMapping.Source = new();

        DataMapping.Source.Settings = sourceSettings;
    }

    private void AddDestinationDbSettings(DataSettings destinationSettings)
    {
        if (DataMapping.Destination == null) DataMapping.Destination = new();

        DataMapping.Destination.Settings = destinationSettings;
    }

    private async Task AddSourceQuery(string query)
    {
        await ShowSuccessAlert("Source Query added");

        if (DataMapping.Source == null) DataMapping.Source = new();

        DataMapping.Source.Query = query;
    }

    private async Task AddDestinationQuery(string query)
    {
        await ShowSuccessAlert("Destination Query added");

        if (DataMapping.Destination == null) DataMapping.Destination = new();

        DataMapping.Destination.Query = query;
    }

    private async Task AddMapping()
    {
        await ShowSuccessAlert("Mapping added");

        await OnDataMappingChanged.InvokeAsync(DataMapping);
    }

    private void ChangeMappingType(ChangeEventArgs e)
    {
        _dataFieldsMapping = new();
        _dataFieldsMapping.MappingType = Enum.Parse<MappingType>(e.Value.ToString());
    }

    private async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }

    private void AddFieldsMapping(DataFieldsMapping dataFieldMapping)
    {
        DataMapping.FieldsMapping.Remove(dataFieldMapping);
        DataMapping.FieldsMapping.Add(dataFieldMapping);
        _dataFieldsMapping = new DataFieldsMapping();
    }
}