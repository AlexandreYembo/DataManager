@using Connectors.Redis
@using Migration.Models
@using Migration.Models.Profile
@inject IJSRuntime jsRuntime
@inject IRepository<DataSettings> _redis;

<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title"><DocumentationComponent DocumentationPath="DataMapping.md"></DocumentationComponent> Select the profile type </h3>
        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body" style="display: block;">
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    <label>Select what type of mapping do you want to apply</label>
                    <select class="form-control" data-keeper-edited="yes" value="@Profile.DataQueryMappingType" @onchange="ChangeDataQueryMappingType">
                        @foreach (var value in Enum.GetValues<DataQueryMappingType>())
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-sm-2">
                <label>Operation Type</label>
                <select class="form-control" data-keeper-edited="yes" value="@Profile.OperationType" @onchange="ChangeOperationType">
                    @foreach (var operationType in Enum.GetValues<OperationType>())
                    {
                        <option value="@operationType">@operationType</option>
                    }
                </select>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                @if (Profile.DataQueryMappingType == DataQueryMappingType.SourceToTarget)
                {
                    <DatabaseSelectorComponent Title="Select the source"
                                               ConnectionStrings="DataSettings?.ToDictionary(kvp => kvp.FullName, kvp => kvp.FullName)"
                                               DataSettings="Profile.Source.Settings"
                                               OnDbSettingsChanged="(sourceDbSettings) => AddSourceDbSettings(sourceDbSettings)"
                                               Query="@Profile.Source.Query"
                                               OnQueryAdded="async (query) => await AddSourceQuery(query)"
                                               DisplayQuery="true">
                    </DatabaseSelectorComponent>
                    <DatabaseSelectorComponent Title="Select the target"
                                               ConnectionStrings="DataSettings?.ToDictionary(kvp => kvp.FullName, kvp => kvp.FullName)"
                                               DataSettings="Profile.Target.Settings"
                                               OnDbSettingsChanged="(sourceDbSettings) => AddTargetDbSettings(sourceDbSettings)"
                                               Query="@Profile.Target.Query"
                                               OnQueryAdded="async (query) => await AddTargetQuery(query)"
                                               DisplayQuery="DisplayQuery()"
                                               TypeOfOperation="@Profile.OperationType">
                    </DatabaseSelectorComponent>

                }
                else
                {
                    <DatabaseSelectorComponent Title="Select data"
                                               ConnectionStrings="DataSettings?.ToDictionary(kvp => kvp.FullName, kvp => kvp.FullName)"
                                               DataSettings="Profile.Source.Settings"
                                               OnDbSettingsChanged="(sourceDbSettings) => AddSourceDbSettings(sourceDbSettings)"
                                               Query="@Profile.Source.Query"
                                               OnQueryAdded="async (query) => await AddSourceQuery(query)"
                                               DisplayQuery="true"
                                               TypeOfOperation="@Profile.OperationType">
                    </DatabaseSelectorComponent>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<DataQueryMappingType> DataQueryMappingTypeChangedCallback { get; set; }

    [Parameter]
    public DataQueryMappingType DataQueryType { get; set; }

    [Parameter]
    public ProfileConfiguration Profile { get; set; }

    [Parameter]
    public List<DataSettings> DataSettings { get; set; }

    [Parameter]
    public Action<ProfileConfiguration> WhenNewConnectIsAdded { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var redisData = await _redis.FindAsync();

        if (!redisData.Any())
            return;

        DataSettings = redisData;

        DataSettings.Add(new ()
        {
            ConnectionType = ConnectionType.Redis,
            Name =  "Cache",
            IsCacheConnection = true
        });

        // if (DataMapping.Source.Settings == null)
        // {
        //     DataMapping.Source.Settings = DataSettings.FirstOrDefault();
        //     DataMapping.Source.Settings.CurrentEntity = DataMapping.Source.Settings.Entities.FirstOrDefault();
        // }

        // if (DataMapping.Destination.Settings == null)
        // {
        //     DataMapping.Destination.Settings = DataSettings.FirstOrDefault();
        //     DataMapping.Destination.Settings.CurrentEntity = DataMapping.Destination.Settings.Entities.FirstOrDefault();
        // }
    }

    public async Task ChangeDataQueryMappingType(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        if (Enum.TryParse<DataQueryMappingType>(e.Value.ToString(), out var value))
            DataQueryType = value;

        Profile.DataQueryMappingType = DataQueryType;

        await DataQueryMappingTypeChangedCallback.InvokeAsync(DataQueryType);
    }

    private void ChangeOperationType(ChangeEventArgs e)
    {
        Profile.OperationType = Enum.Parse<OperationType>(e.Value.ToString());
    }

    private void AddSourceDbSettings(DataSettings sourceSettings)
    {
        if (Profile.Source == null) Profile.Source = new();

        Profile.Source.Settings = sourceSettings;
    }

    private void AddTargetDbSettings(DataSettings targetSettings)
    {
        if (Profile.Target == null) Profile.Target = new();

        Profile.Target.Settings = targetSettings;
    }

    private async Task AddSourceQuery(string query)
    {
        await ShowSuccessAlert("Source Query added");

        if (Profile.Source == null) Profile.Source = new();

        Profile.Source.Query = query;
    }

    private async Task AddTargetQuery(string query)
    {
        await ShowSuccessAlert("Target Query added");

        if (Profile.Target == null) Profile.Target = new();

        Profile.Target.Query = query;
    }

    private async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }

    private async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }

    private bool DisplayQuery() => Profile.OperationType != OperationType.Import;
    private bool IsImport() => Profile.OperationType == OperationType.Import;

}