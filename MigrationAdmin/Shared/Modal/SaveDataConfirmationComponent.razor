@inject IJSRuntime jsRuntime
@using Migration.Infrastructure.Redis.Entities
@using Migration.Infrastructure.Redis
@inject IRepository<object> _redis;

<div class="modal fade show" id="logDetailsModal" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog" style="max-width: 500px;">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">@ModalTitle</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body" style="overflow:scroll;max-height:100px">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>Provide the name for @Data.GetType().Name</label>
                            <input class="form-control" data-keeper-edited="yes" @bind="@_name" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" style="margin-top:15px;" class="btn btn-close" @onclick=SaveOk>Save</button>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public string TypeOfEntity { get; set; }

    [Parameter]
    public string ModalTitle { get; set; }

    [Parameter]
    public object Data { get; set; }
    
    [Parameter]
    public EventCallback OnConfirmation { get; set; }
    
    private string _name;

    public async Task SaveOk()
    {
        var redisData = new RedisData<object>()
        {
            Data = Data,
            Key = _name
        };

        await _redis.SaveAsync(redisData);

        await ShowSuccessAlert();
        
        await OnConfirmation.InvokeAsync();
    }

    public async Task ShowSuccessAlert()
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", $"{Data.GetType().Name} saved");
    }
}