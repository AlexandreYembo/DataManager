@using Migration.Repository.Models
@using Migration.Repository
@using Migration.Infrastructure.Redis
@using Migration.Infrastructure.Redis.Entities
@inject IRepository<DataSettings> _dataSettingsRepository;
@inject IRepository<Profile> _profileRepository;
@inject IJSRuntime jsRuntime

<div class="modal fade show" id="dataDifferenceModal" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog" style="max-width:100%;">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Data Difference</h4>
            </div>

            <!-- Modal body -->
            <div class="modal-body" style="height: 900px; overflow: scroll">
                <DataQueryComponent DataMapping="Profile.DataMappings[0]"
                                    DataSettings="_dataSettings"></DataQueryComponent>
                
                @if (Profile.DataMappings[0].DataQueryMappingType == DataQueryMappingType.UpdateAnotherCollection)
                {
                    <DataMappingDestinationComponent DataMapping="Profile.DataMappings[0]"
                                                     OnDataMappingChanged="(mappingResult) => _ = mappingResult"></DataMappingDestinationComponent>
                }
                else
                {
                    <DataMappingSameTableComponent DataMapping="Profile.DataMappings[0]"
                                                   OnDataMappingChanged="(mappingResult) => _ = mappingResult"></DataMappingSameTableComponent>
                }
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" style="margin-top:15px;" class="btn btn-save" @onclick="SaveProfile">Save</button>
                <button type="button" style="margin-top:15px;" class="btn btn-close" @onclick="ModalOk">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Profile Profile { get; set; }

    [Parameter]
    public EventCallback ModalOk { get; set; }

    private IEnumerable<DataSettings> _dataSettings;

    private async Task SaveProfile()
    {
        var redisData = new RedisData<Profile>()
        {
            Data = Profile,
            Key = Profile.Name
        };

        await _profileRepository.SaveAsync(redisData);

        await ShowSuccessAlert();
    }

    private async Task ShowSuccessAlert()
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", $"Profile configuration updated");
    }
}