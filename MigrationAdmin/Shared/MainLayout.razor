@using Migration.Repository.LogModels
@using Migration.Repository.Publishers
@using Migration.Repository.Subscribers
@using Migration.Repository.Delegates
@using Migration.Services.Subscribers
@inherits LayoutComponentBase
@inject LogResultSubscriber _logSubscriber
@inject LogPublisher _logPublisher
@inject LogDetailsPublisher _logDetailsPublisher
@inject GetLogPublisher _getLogPublisher;
@inject MigrationLogPersistSubscriber _logPersistSubscriber;
@inject ActionsPublisher _actionsPublisher;
@inject IJSRuntime jsRuntime

<PageTitle>Migration tool</PageTitle>
<div class="wrapper">
    <NavMenu />
    <div class="content-wrapper">
        @Body
    </div>
    <footer class="main-footer">
        <Log LogResult="_logResult"></Log>
        <strong>Copyright &copy; 2023 <a href="#"></a>.</strong>
        All rights reserved.
        <div class="float-right d-none d-sm-inline-block">
            <b>Version</b> 1.0.0
        </div>
    </footer>
</div>

@code{
    private LogResult _logResult;

    protected override async Task OnInitializedAsync()
    {
        _logPublisher.OnEventPublished += _logSubscriber.OnEventChanged;
        _logPublisher.OnEventPublished += OnLogUpdated;
        _logDetailsPublisher.OnEventPublished += _logSubscriber.OnEventChanged;

        _logPublisher.OnEventPublished += _logPersistSubscriber.LogResultPublisher_OnEntityChanged;
        _logDetailsPublisher.OnEventPublished += _logPersistSubscriber.LogDetailsPublisher_OnEntityChanged;

        _getLogPublisher.OnEventPublished += OnLogUpdated;

        _actionsPublisher.OnEventPublished += OnActionCompleted;
    }

    private void OnLogUpdated(object sender, LogResultEventArgs e)
    {
        _logResult = e.LogResult;

        InvokeAsync(StateHasChanged);
    }

    private void OnActionCompleted(object sender, ActionsEventArgs e)
    {
        if (e.Actions.ActionType == ActionEventType.Success)
        {
            ShowSuccessAlert(e.Actions.Message).GetAwaiter().GetResult();
        }
        else
        {
            ShowErrorAlert(e.Actions.Message).GetAwaiter().GetResult();
        }
    }

    private async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }

    private async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }
 }