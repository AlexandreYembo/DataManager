@using Microsoft.AspNetCore.Components
@using Migration.Repository.Models
<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Configure the Fields you want to merge the value</h3>
    </div>
    <div class="card-body">
        <table id="mergeMapping" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Source Condition</th>
                    <th>Source</th>
                    <th>Destination</th>
                    <th>
                        <button class="btn btn-success" @onclick="() => AddCommand()">+</button>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var destMap in DataMapping.FieldsMapping.Where(w => w.MappingType == MappingType.ValueMergeWithCondition))
                {
                    <tr>
                        <td>
                            <table id="mergeMapping" class="table table-bordered table-striped">
                                <thead>
                                <tr>
                                    <th>Value Type</th>
                                    <th>Source Condition</th>
                                    <th>
                                        <button class="btn btn-success" @onclick="() => AddCondition(destMap.SourceCondition)">+</button>
                                    </th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var sourceCondition in destMap.SourceCondition)
                                {
                                    <tr>
                                        <td>
                                            @if (sourceCondition.Type != null)
                                            {
                                                <select class="form-control" id="fieldType" data-keeper-edited="yes" @bind="@sourceCondition.Type">
                                                    @foreach (var fieldType in Enum.GetValues<SearchConditionType>())
                                                    {
                                                        <option value="@fieldType">@fieldType</option>
                                                    }
                                                </select>
                                            }
                                        </td>
                                        <td>
                                            <input class="form-control" id="command" data-keeper-edited="yes" @bind="@sourceCondition.Query" />
                                        </td>
                                        <td>
                                            @if (sourceCondition.Type != null)
                                            {
                                                <button class="btn btn-danger" @onclick="() => RemoveCondition(destMap.SourceCondition, sourceCondition)">-</button>
                                            }
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </td>
                        <td>
                            <input class="form-control" id="command" data-keeper-edited="yes" @bind="@destMap.SourceField" />
                        </td>
                        <td>
                            <input class="form-control" id="command" data-keeper-edited="yes" @bind="@destMap.DestinationField" />
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => RemoveCommand(destMap)">-</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public DataMapping DataMapping { get; set; } = new();

    protected override void OnInitialized()
    {
        AddCommand();
    }

    private void AddCommand()
    {
        DataMapping.FieldsMapping.Add(new DataFieldsMapping()
            {
                MappingType = MappingType.ValueMergeWithCondition,
                SourceCondition = new List<SearchCondition>()
                {
                    new ()
                }
            });
    }

    private void RemoveCommand(DataFieldsMapping destMap)
    {
        DataMapping.FieldsMapping.Remove(destMap);
    }

    private void AddCondition(List<SearchCondition> searchConditions)
    {
        searchConditions.Add(new SearchCondition()
            {
                Type = SearchConditionType.And
            });
    }

    private void RemoveCondition(List<SearchCondition> searchConditions, SearchCondition searchCondition)
    {
        searchConditions.Remove(searchCondition);
    }
}