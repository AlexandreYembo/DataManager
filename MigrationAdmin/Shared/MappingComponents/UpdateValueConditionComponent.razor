@using Microsoft.AspNetCore.Components
@using Migration.Repository.Models
@inherits MigrationAdmin.CustomComponents

<div class="card card-default">
    <div class="card-header">
        <h3 class="card-title">Configure the Fields you want to merge the value based on Condition</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label>Source Condition</label>
                    <table class="table table-bordered table-striped">
                        <thead>
                        <tr>
                            <th>Value Type</th>
                            <th>Source Condition</th>
                            <th>
                                <button class="btn btn-success" @onclick="() => AddCondition(_dataFieldsMapping.SourceCondition)">+</button>
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var sourceCondition in _dataFieldsMapping.SourceCondition)
                        {
                            <tr>
                                <td>
                                    @if (sourceCondition.Type != null)
                                    {
                                        <select class="form-control" id="fieldType" data-keeper-edited="yes" @bind="@sourceCondition.Type">
                                            @foreach (var fieldType in Enum.GetValues<SearchConditionType>())
                                            {
                                                <option value="@fieldType">@fieldType</option>
                                            }
                                        </select>
                                    }
                                </td>
                                <td>
                                    <input class="form-control" id="command" data-keeper-edited="yes" @bind="@sourceCondition.Query" />
                                </td>
                                <td>
                                    @if (sourceCondition.Type != null)
                                    {
                                        <button class="btn btn-danger" @onclick="() => RemoveCondition(_dataFieldsMapping.SourceCondition, sourceCondition)">-</button>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Destination Field</label>
                    <input class="form-control" data-keeper-edited="yes" @bind="_dataFieldsMapping.DestinationField" />
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Destination Value</label>
                    <input class="form-control" data-keeper-edited="yes" @bind="_dataFieldsMapping.ValueField" />
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <button class="btn btn-default" @onclick="async () =>_dataFieldsMapping = await AddDataFieldsMapping(_dataFieldsMapping, MappingType.ValueWithCondition)">Add</button>
    </div>
</div>

@code {
    private DataFieldsMapping _dataFieldsMapping = new();

    protected override void OnInitialized()
    {
        _dataFieldsMapping.SourceCondition.Add(new SearchCondition());
    }

    private void AddCondition(List<SearchCondition> searchConditions)
    {
        searchConditions.Add(new SearchCondition()
        {
            Type = SearchConditionType.And
        });
    }

    private void RemoveCondition(List<SearchCondition> searchConditions, SearchCondition searchCondition)
    {
        searchConditions.Remove(searchCondition);
    }
}