@page "/dataMigration"
@using Migration.Repository.Models
@using Migration.Services
@using Migration.Infrastructure.Redis
@using Migration.Infrastructure.Redis.Entities
@using Migration.Services.Delegates
@using Migration.Services.Publishers
@using Migration.Services.Subscribers
@using Newtonsoft.Json.Linq
@inject IJSRuntime jsRuntime
@inherits CustomComponents;
@inject IMigrationService _migrateService;
@inject IRepository<Profile> _profileRepository;
@inject IRepository<JObject> _repository;
@inject LogResultSubscriber LogSubscriber
@inject LogPublisher LogPublisher
@inject LogDetailsPublisher LogDetailsPublisher

<div class="card card-default card-tabs">
    <div class="card-header p-0 pt-1">
        <ul class="nav nav-tabs" id="custom-tabs-one-tab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="custom-tabs-one-profiles-tab" role="tab" data-toggle="pill" href="#custom-tabs-one-profiles" aria-controls="custom-tabs-one-profiles" aria-selected="true"><i class="nav-icon fas fa-address-card"></i> List of Profiles</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="custom-tabs-one-jobs-tab" role="tab" data-toggle="pill" href="#custom-tabs-one-jobs" aria-controls="custom-tabs-one-jobs" aria-selected="true"><i class="nav-icon fas fa-address-card"></i> List of Jobs</a>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="custom-tabs-one-tabContent">
            <div class="tab-pane fade show active" id="custom-tabs-one-profiles" role="tabpanel" aria-labelledby="custom-tabs-one-profiles-tab">
                <table id="dataGeneral" class="table table-bordered table-striped">
                    <thead>
                    <tr>
                        <th>Profile</th>
                        <th>Description</th>
                        <th>
                            Mapping
                        </th>
                        <th>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_profiles != null)
                    {
                        foreach (var profile in _profiles)
                        {
                            <tr>
                                <td>
                                    <p>Database Name: <b> @profile.Name</b></p>
                                </td>
                                <td>
                                    <p>Database Name: <b> @profile.Description</b></p>
                                </td>
                                <td>
                                    <table id="dataFields" class="table table-bordered table-striped">
                                        <thead>
                                        <tr>
                                            <th>Mapping Type</th>
                                            <th>Source</th>
                                            <th>Destination</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach (var fieldMapping in profile.DataMappings[0].FieldsMapping.OrderBy(s => s.MappingType))
                                        {
                                            <tr>
                                                <td>
                                                    @fieldMapping.MappingType
                                                </td>
                                                <td>
                                                    @profile.DataMappings[0].Source.Settings.CurrentEntity.@fieldMapping.SourceField
                                                </td>
                                                <td>
                                                    @profile.DataMappings[0].Destination.Settings.CurrentEntity.@fieldMapping.DestinationField
                                                </td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </td>
                                <td>
                                    <input type="checkbox" @bind="profile.Selected" />
                                    <button class="btn btn-default" @onclick="() => EdiProfile(profile)"> <i class="nav-icon fas fa-edit"></i> Edit</button>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
            <div class="tab-pane fade" id="custom-tabs-one-jobs" role="tabpanel" aria-labelledby="custom-tabs-one-jobs-tab">
                <table id="jobs" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Job Id</th>
                            <th>Profile</th>
                            <th>Operation Type</th>
                            <th>
                                Status
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_jobs != null)
                        {
                            foreach (var job in _jobs)
                            {
                                <tr>
                                    <td>
                                        @job.SelectToken("JobId")
                                    </td>
                                    <td>
                                        @job.SelectToken("ProfileId")
                                    </td>
                                    <td>
                                        @job.SelectToken("OperationType")
                                    </td>
                                    <td>
                                        @job.SelectToken("Status")
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="col-sm-1">
            <button class="btn btn-default" @onclick="() => Migrate()"> <i class="nav-icon fas fa-database"></i> Migrate</button>
        </div>
    </div>
</div>

<Log LogResult="LogResult" IsLoading="Loading"></Log>

@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

@if (_editProfileModalIsEnabled)
{
    <EditProfileComponent Profile="_editProfile"
                          ModalOk="() => ModalOk()"></EditProfileComponent>
}

@code {

    private bool _editProfileModalIsEnabled;
    private Profile _editProfile;
    private List<Profile> _profiles;
    private List<JObject> _jobs;

    protected override async Task OnInitializedAsync()
    {
        LogPublisher.OnEntityChanged += LogSubscriber.OnEventChanged;
        LogPublisher.OnEntityChanged += OnLogUpdated;
        LogDetailsPublisher.OnEntityChanged += LogSubscriber.OnEventChanged;

        try
        {
            _profiles = await _profileRepository.FindAsync();
            _jobs = await _repository.FindAsync(new RedisData<JObject>()
            {
                Id = "Jobs"
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void OnLogUpdated(object sender, LogResultEventArgs e)
    {
        LogResult = e.LogResult;
        InvokeAsync(StateHasChanged);
    }

    public async Task Migrate()
    {
        var profileToMigrate = _profiles.Where(w => w.Selected);

        if (!profileToMigrate.Any())
        {
            await ShowErrorAlert("You must need to select one profile");
        }
        else if (profileToMigrate.Count() > 1)
        {
            await ShowErrorAlert("You cannot perform more than 1 migration in the same time");
        }
        Loading = true;

        await _migrateService.Migrate(profileToMigrate.FirstOrDefault().DataMappings[0]);

        Loading = false;
    }

    public void EdiProfile(Profile profile)
    {
        _editProfile = profile;
        _editProfileModalIsEnabled = true;
    }

    public void ModalOk()
    {
        _editProfileModalIsEnabled = false;
    }

    private async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }
}