@page "/profileConfiguration"
@using Migration.Models
@using Migration.Models.Profile
@using Migration.Services
@using Migration.Services.Models
@using Migration.Services.Helpers
@using MigrationAdmin.Validations
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Migration.Infrastructure.Redis
@using Migration.Infrastructure.Redis.Entities
@inherits CustomComponents;
@inject IJSRuntime jsRuntime
@inject IQueryService _queryService;
@inject IRepository<DataSettings> _dataSettingsRepository;
@inject IRepository<ProfileConfiguration> _profileRepository;
@inject ProfileValidation _profileValidation;

<div class="card card-default card-tabs">
    <div class="card-header p-0 pt-1">
        <ul class="nav nav-tabs" id="custom-tabs-one-tab" role="tablist">
            <li class="nav-item">
                <a class="nav-link @GetStep("active", 1)" id="custom-tabs-one-profiles-tab" role="tab" aria-controls="custom-tabs-one-profiles" aria-selected="true"><i class="nav-icon fas fa-object-group"></i> Profiles</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 2)" id="custom-tabs-one-sourceData-tab" role="tab" aria-controls="custom-tabs-one-sourceData" aria-selected="false"><i class="nav-icon fas fa-table"></i> Profile Type</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 3)" id="custom-tabs-one-mapping-tab" role="tab" aria-controls="custom-tabs-one-mapping" aria-selected="false"><i class="nav-icon fas fa-map"></i> Mapping</a>
            </li>
            @if (Profile.OperationType == OperationType.Import)
            {
                <li class="nav-item">
                    <a class="nav-link  @GetStep("active", 4)" id="custom-tabs-one-dataAttributes-tab" role="tab" aria-controls="custom-tabs-one-dataAttributes" aria-selected="false"><i class="nav-icon fas fa-key"></i> Data Attributes</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link  @GetStep("active", 5)" id="custom-tabs-one-preview-tab" role="tab" aria-controls="custom-tabs-one-preview" aria-selected="false"><i class="nav-icon fas fa-list"></i> Summary</a>
                </li>
            }
            else
            {
                <li class="nav-item">
                    <a class="nav-link  @GetStep("active", 4)" id="custom-tabs-one-preview-tab" role="tab" aria-controls="custom-tabs-one-preview" aria-selected="false"><i class="nav-icon fas fa-list"></i> Summary</a>
                </li>
            }
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="custom-tabs-one-tabContent">
            <div class="tab-pane fade  @GetStep("show active", 1)" id="custom-tabs-one-database" role="tabpanel" aria-labelledby="custom-tabs-one-database-tab">
                <div class="row">
                    <div class="col-sm-12">
                        <JobCategoryComponent OnJobCategorySelected="(jobCategory) => Search(jobCategory.CategoryName)"></JobCategoryComponent>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <table id="profiles" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Profile</th>
                                    <th>Description</th>
                                    <th>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_profiles != null)
                                {
                                    foreach (var profile in _profiles)
                                    {
                                        <tr>
                                            <td>
                                                @profile.Name
                                            </td>
                                            <td>
                                                @profile.Description
                                            </td>
                                            <td>
                                                <button class="btn btn-default" @onclick="() => EditProfile(profile)"> <i class="nav-icon fas fa-edit"></i> Edit</button>
                                                <button class="btn btn-default" @onclick="() => CloneProfile(profile)"> <i class="nav-icon fas fa-copy"></i> Clone</button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade @GetStep("show active", 2)" id="custom-tabs-one-sourceData" role="tabpanel" aria-labelledby="custom-tabs-one-sourceData-tab">
                <DataQueryComponent Profile="Profile"
                                    DataSettings="_dataSettings"
                                    DataQueryMappingTypeChangedCallback="(dataType) => Profile.DataQueryMappingType = dataType"></DataQueryComponent>
            </div>

            <div class="tab-pane fade @GetStep("show active", 3)" id="custom-tabs-one-mapping" role="tabpanel" aria-labelledby="custom-tabs-one-mapping-tab">
                @if (Profile.DataQueryMappingType == DataQueryMappingType.SourceToTarget)
                {
                    <DataMappingTargetComponent Profile="Profile"></DataMappingTargetComponent>
                }
                else
                {
                    <DataMappingSameTableComponent Profile="Profile"></DataMappingSameTableComponent>
                }
            </div>

            @if (Profile.OperationType == OperationType.Import)
            {
                <div class="tab-pane fade @GetStep("show active", 4)" id="custom-tabs-one-dataAttributes" role="tabpanel" aria-labelledby="custom-tabs-one-dataAttributes-tab">
                    <DataImportConfigurationComponent DataAttributes="Profile.Target.Settings.CurrentEntity.Attributes"
                                                      OnCustomAttributesAdded="(customAttributes) => Profile.Target.Settings.CurrentEntity.Attributes = UpdateCustomAttribute(Profile.Target.Settings.CurrentEntity.Attributes, customAttributes) "></DataImportConfigurationComponent>
                </div>
            }
            <div class="tab-pane fade @GetStep("show active", Profile.OperationType != OperationType.Import ? 4 : 5)" id="custom-tabs-one-preview" role="tabpanel" aria-labelledby="custom-tabs-one-preview-tab">
                <div class="card card-default">
                    <div class="card-header">
                        <h3 class="card-title">Profile configuration details</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-2">
                                <JobCategoryComponent OnJobCategorySelected="(jobCategory) => Profile.JobCategoryId = jobCategory.CategoryName"></JobCategoryComponent>
                            </div>
                            <div class="col-sm-2">
                                <label>Name</label>
                                <input class="form-control" data-keeper-edited="yes" @bind="@Profile.Name" />
                            </div>
                            <div class="col-sm-2">
                                <label>Description</label>
                                <input class="form-control" data-keeper-edited="yes" @bind="@Profile.Description" />
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-default" @onclick="() => SaveProfile()"> <i class="nav-icon fas fa-save"></i>Save Profile</button>
                    </div>
                </div>
                <div class="card card-default">
                    <div class="card-header">
                        <h3 class="card-title">Data Preview</h3>
                    </div>
                    <div class="card-body">
                        @if (_resultDataFromConfiguration != null)
                        {
                            foreach (var data in _resultDataFromConfiguration)
                            {
                                <div class="row">
                                    <div class="col-sm-1">
                                        <button class="btn btn-default" @onclick="() => CompareChanges(data.Key)"> <i class="nav-icon fas fa-check-circle"></i> Compare Changes</button>
                                    </div>
                                    <div class="col-sm-11">
                                        <div class="card collapsed-card">
                                            <div class="card-header">
                                                <h3 class="card-title"> @data.Key.Split(":").LastOrDefault()</h3>
                                                <div class="card-tools">
                                                    <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="card-body">
                                                @foreach (var values in data.Value)
                                                {
                                                    <div class="row">
                                                        <div class="col-sm-12">
                                                            <div class="card collapsed-card">
                                                                <div class="card-header">
                                                                    <h3 class="card-title"> @values.Entity</h3>
                                                                    <div class="card-tools">
                                                                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                                                            <i class="fas fa-plus"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                                <div class="card-body">
                                                                    <div class="row">
                                                                        <div class="col-sm-12">
                                                                            @values.DataType
                                                                        </div>
                                                                        <div class="col-sm-10">
                                                                            <pre>
                                                                                @JValue.Parse(values.Data.ToString()).ToString(Formatting.Indented) </pre>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            @if (_step > 1)
            {
                <div class="col-sm-1">
                    <button class="btn btn-default" @onclick="() => Previous()"><i class="nav-icon fas fa-step-backward"></i> Previous</button>
                </div>
            }
            @if (_step == 1)
            {
                <div class="col-sm-1">
                    <button class="btn btn-default" @onclick="() => New()"><i class="nav-icon fas fa-folder-plus"></i> New</button>
                </div>
            }
            else if ((Profile.OperationType != OperationType.Import && _step < 3) || (Profile.OperationType == OperationType.Import && _step < 4))
            {
                <div class="col-sm-1">
                    <button class="btn btn-default" @onclick="() => Next()"> <i class="nav-icon fas fa-step-forward"></i> Next</button>
                </div>
            }
            else if ((Profile.OperationType != OperationType.Import && _step == 3) || (Profile.OperationType == OperationType.Import && _step == 4))
            {
                <div class="col-sm-1">
                    <button class="btn btn-default" @onclick="() => PreviewDataResult()"> <i class="nav-icon fas fa-forward"></i> Summary</button>
                </div>
            }
        </div>
    </div>
</div>


@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

@if (_showModalDataDifference)
{
    <DataDifferenceModal ShowModalScroll="true"
                         Id="RecordId"
                         ModalOk="ModalOk" DataDifferences="@DataDifference"
                         IsLoading="Loading"></DataDifferenceModal>
}



<CloneProfileComponent Profile="@Profile"
                       ShowModal="_cloneProfileModalIsEnabled"
                       OnProfileCloned="(profileCloned) => Search(profileCloned.JobCategoryId)"
                       ModalOk="() => _cloneProfileModalIsEnabled = false"></CloneProfileComponent>

@code {
    private bool _cloneProfileModalIsEnabled;

    private List<ProfileConfiguration> _profiles;

    private bool _showModalDataDifference;

    private int _step = 1;

    public ProfileConfiguration Profile { get; set; } = new();

    private Dictionary<string, List<DynamicData>> _resultDataFromConfiguration;

    private IEnumerable<DataSettings> _dataSettings;

    private string _message;

    protected override async Task OnInitializedAsync()
    {
        Profile.Id = Guid.NewGuid().ToString();

        var settings = await _dataSettingsRepository.FindAsync();

        if (!settings.Any()) return;

        _dataSettings = settings;
    }

    public async Task EditProfile(ProfileConfiguration profile)
    {
        Profile = profile;
        Next();
        await InvokeAsync(StateHasChanged);
    }

    public void CloneProfile(ProfileConfiguration profile)
    {
        profile.Name = "Clone-" + profile.Name;

        Profile = profile;

        _cloneProfileModalIsEnabled = true;
    }

    private async Task Search(string jobCategory)
    {
        try
        {
            Profile.Id = Guid.NewGuid().ToString();

            _profiles = await _profileRepository.FindAsync(jobCategory);
        }
        catch
        {
        }
    }

    public async Task PreviewDataResult()
    {
        if (!_profileValidation.IsValid(Profile, _step))
        {
            return;
        }

        _step++;
        Loading = true;

        try
        {
            if (Profile.DataQueryMappingType == DataQueryMappingType.SameCollection)
            {
                Profile.Target = null;
            }
            _resultDataFromConfiguration = await _queryService.Get(Profile, take: 10); //TODO: DataMappings[0] will be a list in the future
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public async Task CompareChanges(string key)
    {
        _showModalDataDifference = true;

        Loading = true;

        try
        {
            DataDifference = new();

            foreach (var data in _resultDataFromConfiguration.Where(w => w.Key == key))
            {
                var differences = DifferencesTargetHelper.FindDifferences(Profile, data.Value);

                if (differences.Any())
                {
                    DataDifference = ConcatMethod(DataDifference, differences);
                }
            }
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public Dictionary<TKey, TValue> ConcatMethod<TKey, TValue>(params Dictionary<TKey, TValue>[] dictionaries)
    {
        var mergedDictionary = dictionaries.Aggregate((dict1, dict2) =>
        dict1.Concat(dict2).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
        return mergedDictionary;
    }

    public void ModalOk()
    {
        _showModalDataDifference = false;
    }

    private string GetStep(string showActive, int step)
    {
        if (_step == step)
            return showActive;

        return string.Empty;
    }

    private void Previous()
    {
        _step--;

        _profileValidation.IsValid(Profile, _step);
    }

    private void New()
    {
        Profile.Id = Guid.NewGuid().ToString();

        Next();
    }

    private void Next()
    {
        if (!_profileValidation.IsValid(Profile, _step))
        {
            return;
        }
        _step++;
    }

    // private async Task UpdateDataSettings()
    // {
    //     _dataSettings = await _dataSettingsRepository.FindAsync();

    //     Profile.DataMappings[0].Source.Settings = _dataSettings.FirstOrDefault();
    //     Profile.DataMappings[0].Target.Settings = _dataSettings.FirstOrDefault();
    // }

    private async Task SaveProfile()
    {
        if (Profile.DataQueryMappingType == DataQueryMappingType.SameCollection)
        {
            Profile.Target = null;
        }

        var redisData = new RedisData<ProfileConfiguration>()
            {
                Data = Profile,
                RedisValue = Profile.Id,
                RedisKey = Profile.JobCategoryId
            };

        await _profileRepository.SaveAsync(redisData);

        await ShowSuccessAlert();
    }


    private async Task ShowSuccessAlert()
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", $"Profile configuration saved");
    }

    private async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }
}