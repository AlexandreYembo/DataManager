@page "/updateRecordsInBatch"
@using Migration.Repository
@using Migration.Repository.DbOperations
@using Migration.Services
@using Migration.Services.Delegates
@using Migration.Services.Publishers
@using Migration.Services.Subscribers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Microsoft.AspNetCore.Components
@using Migration.Repository.Models
@using Migration.Services.Helpers
@inherits CustomComponents;
@inject LogResultSubscriber LogSubscriber
@inject LogPublisher LogPublisher
@inject LogDetailsPublisher LogDetailsPublisher
@inject IUpdateRecordsInBatchService _service;
@inject IStorage<Dictionary<string, List<Difference>>> LocalStorage;
@inject IJSRuntime jsRuntime

<div class="content">
    <div class="container-fluid">
        <ConnectionStringConfiguration Database="" Title="Add the connection details of the source you want to update the information"
                                       OnDbSettingsChanged="(settings) => DbSettings = settings"></ConnectionStringConfiguration>
        <div class="card card-info">
            <div class="card-header">
                <h3 class="card-title">Query</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>Query (Format: select c.Field1,c.Field2,c.Field3,c.Field4 from c where c.Field1 = value) or (select * from c where c.Field1 = value)</label>
                            <input class="form-control" id="query" data-keeper-edited="yes" @bind="@Query" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <button class="btn btn-success" @onclick="() => Get()">Get Data</button>
                </div>
            </div>
        </div>
        @if (IsLoading)
        {
            <div class="col-sm-12">
                <Loading />
            </div>
        }
        <div class="card card-info">
            <div class="card-header">
                <h3 class="card-title">Fields to Update</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <table id="dataManagement" class="table">
                        <thead>
                            <tr>
                                <th>Field Type</th>
                                <th>Field (Including the Path for Objects and Array)</th>
                                <th>Value</th>
                                <th>
                                    <button class="btn btn-success" @onclick="() => AddCommand()">+</button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var command in CommandsModel)
                            {
                                <tr>
                                    <td>
                                        <select class="form-control" id="fieldType" data-keeper-edited="yes" @bind="@command.Type">
                                            @foreach (var fieldType in FieldsTypes)
                                            {
                                                <option value="@fieldType">@fieldType</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <input class="form-control" id="command" data-keeper-edited="yes" @bind="@command.Field" />
                                    </td>
                                    <td>
                                        <input class="form-control" id="command" data-keeper-edited="yes" @bind="@command.Value" />
                                    </td>
                                    <td>
                                        <button class="btn btn-danger" @onclick="() => RemoveCommand(command)">-</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            @if (Data.Any())
            {
                <div class="card-footer">
                    <button class="btn btn-success" @onclick="() => CreateBackup()">Backup Data</button>
                    <button class="btn btn-success" @onclick="() => PreviewChanges()">Preview</button>
                    <button class="btn btn-warning" @onclick="() => InsertOrUpdate()">Insert / Update</button>
                </div>

            }
        </div>
    </div>

    <div class="card card-info">
        <div class="card-header">
            <h4 class="card-title">Record results - Total: @Data?.Count</h4>
        </div>

        @if (Data.Any())
        {
            <div class="card-body">
                <div class="row">
                    <table id="dataResult" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Data</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detail in Data)
                            {
                                <tr>
                                    <td>
                                        <div class="card direct-chat direct-chat-primary">
                                            <div class="card-header">
                                                <h3 class="card-title">@detail.Id</h3>
                                                <div class="card-tools">
                                                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="card-body" style="display: block;">
                                                <div>
                                                    <pre>
                                                        @JValue.Parse(detail.Data).ToString(Formatting.Indented)
                                                                                                                                     </pre>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="card-footer">
                                            @foreach (var actionType in detail.Actions)
                                            {
                                                switch (actionType)
                                                {
                                                    case ActionType.RevertToPreviousChange:
                                                        <button class="btn btn-warning" @onclick="() => RevertChanges(detail.Id)">Revert</button>
                                                        <button class="btn btn-success" @onclick="() => GetDiference(detail.Id)">Compare</button>
                                                        break;

                                                    case ActionType.BackupData:
                                                        <div class="card-footer">
                                                            <button class="btn btn-success" @onclick="() => RevertChanges(detail.Id)">Download backup</button>
                                                        </div>
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
    <Log LogResult="LogResult" IsLoading="Loading"></Log>
</div>
@if (ShowModalDataDifference)
{
    <DataDifferenceModal ShowModalScroll="true"
                     Id="RecordId"
                     ModalOk="ModalOk" DataDifferences="@DataDifference"
                     ModalConfirm="ModalConfirm"
                     IsLoading="Loading"></DataDifferenceModal>
}

@if (ShowRestoreDataModal)
{
    <RestoreData ShowModalScroll="true"
             Id="RecordId"
             ModalOk="ModalOk" DataDifferences="@DataDifference"
             ModalConfirm="ModalConfirm"
             IsLoading="Loading"></RestoreData>
}

@code {
    public string Update { get; set; }
    public string Query { get; set; }
    public bool ShowModalDataDifference { get; set; }
    public bool ShowRestoreDataModal { get; set; }

    public List<CommandModel> CommandsModel { get; set; } = new();
    public List<DBSettings> ListDbSettings { get; set; } = new();

    public List<string> FieldsTypes { get; set; } = new()
    {
        "Select an option",
        "String",
        "Integer",
        "Boolean",
        "Guid",
        "DateTime"
    };

    public bool IsLoading { get; set; }

    public DBSettings DbSettings { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        LogPublisher.OnEntityChanged += LogSubscriber.OnEventChanged;
        LogPublisher.OnEntityChanged += OnLogUpdated;
        LogDetailsPublisher.OnEntityChanged += LogSubscriber.OnEventChanged;
        AddCommand();
    }

    private void OnLogUpdated(object sender, LogResultEventArgs e)
    {
        LogResult = e.LogResult;
        InvokeAsync(StateHasChanged);
    }

    public void ModalOk()
    {
        ShowRestoreDataModal = false;
        ShowModalDataDifference = false;
    }

    public async Task ModalConfirm()
    {
        IsLoading = true;
        ShowRestoreDataModal = false;

        var dataRestored = await _service.Revert(DbSettings, RecordId);

        Data.RemoveAll(w => w.Id == RecordId);

        Data.Add(dataRestored);

        await ShowSuccessAlert();
        IsLoading = false;
    }

    public void AddCommand()
    {
        CommandsModel.Add(new CommandModel());
    }

    public async Task Get()
    {
        IsLoading = true;
        Data = await _service.GetData(DbSettings, Query);
        IsLoading = false;
    }

    public async Task PreviewChanges()
    {
        ShowModalDataDifference = true;
        IsLoading = true;

        var dataList = _service.Preview(CommandsModel, Data);

        DataDifference = new();

        foreach (var data in dataList)
        {
            DataDifference.Add(data.Key, DifferenceHelper.FindDifferences(data.Value));
        }

        IsLoading = false;
    }

    public async Task CreateBackup()
    {
        await File.WriteAllTextAsync($"{DbSettings.Container}.json", JsonConvert.SerializeObject(Data));
    }

    public async Task InsertOrUpdate()
    {
        IsLoading = true;

        var dataList = _service.Preview(CommandsModel, Data);

        DataDifference = new();

        foreach (var data in dataList)
        {
            DataDifference.Add(data.Key, DifferenceHelper.FindDifferences(data.Value));
        }

        await LocalStorage.Add(DataDifference, "DataDifference");

        Data = await _service.Update(DbSettings, CommandsModel, Data);

        IsLoading = false;
        await ShowSuccessAlert();
    }

    public async Task RevertChanges(string recordId)
    {
        ShowRestoreDataModal = true;
        RecordId = recordId;
        var result = (await LocalStorage.GetByKey("DataDifference"));

        DataDifference = new Dictionary<string, List<Difference>>()
        {
            {
                recordId, result[recordId]
            }
        };
    }

    private async Task GetDiference(string recordId)
    {
        ////Read from local storage
        IsLoading = true;
        ShowModalDataDifference = true;

        RecordId = recordId;
        var result = (await LocalStorage.GetByKey("DataDifference"));

        DataDifference = new Dictionary<string, List<Difference>>()
        {
            {
                recordId, result[recordId]
            }
        };

        IsLoading = false;
    }

    private void RemoveCommand(CommandModel command)
    {
        CommandsModel.Remove(command);
    }

    public async Task ShowSuccessAlert()
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", "Record updated sucessfuly");
    }
}