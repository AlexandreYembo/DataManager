@page "/runJobs"
@using Migration.Infrastructure.Redis
@using Migration.Infrastructure.Redis.Entities
@using Migration.Repository.LogModels
@using Migration.Repository.Models
@using Migration.Repository.Publishers
@using Migration.Services
@using Newtonsoft.Json
@inherits CustomComponents;
@inject IRepository<Profile> _profileRepository;
@inject IRepository<Jobs> _repository;
@inject IRepository<LogResult> _logRepository;
@inject IJSRuntime jsRuntime
@inject IMigrationService _migrateService;
@inject JobsPublisher _jobPublisher;
@inject LogPublisher _logPublisher;

<div class="content">
    <div class="container-fluid">
        <div class="card card-default">
            <div class="card-header">
                <h3 class="card-title">Jobs</h3>
            </div>
            <div class="card-body">
                <table id="jobs" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Job Id</th>
                            <th>Profile</th>
                            <th>Operation Type</th>
                            <th>Source Pagination (Skip)</th>
                            <th>Destination Pagination (Skip)</th>
                            <th>
                                Status
                            </th>
                            <th>

                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_jobs != null)
                        {
                            foreach (var job in _jobs)
                            {
                                <tr>
                                    <td>
                                        @job.JobId
                                    </td>
                                    <td>
                                        @job.ProfileId
                                    </td>
                                    <td>
                                        @job.OperationType
                                    </td>
                                    <td>
                                        @job.SourceProcessed
                                    </td>
                                    <td>
                                        @job.DestinationProcessed
                                    </td>
                                    <td>
                                        @if (job.Status == JobStatus.InProgress)
                                        {
                                            <img src="dist/img/loading-inProgress.gif" style="width: 35px; height: 35px;" />
                                        }
                                        else if (job.Status == JobStatus.Queued)
                                        {
                                            <i class="nav-icon fas fa-list"></i>
                                        }

                                        @job.Status
                                    </td>
                                    <td>
                                        @if (job.Status == JobStatus.Queued)
                                        {
                                            <button class="btn btn-default" @onclick="() => Migrate(job)"> <i class="nav-icon fas fa-database"></i> Migrate</button>
                                        }
                                        @if (job.Status == JobStatus.Completed || job.Status == JobStatus.Error)
                                        {
                                            <button class="btn btn-default" @onclick="() => GetLog(job)"> <i class="nav-icon fas fa-list"></i> Get Logs</button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}

<ConfirmComponent Title="Start Migration" ShowPopup="_confirmJobAlreadyInProgress" Description="There is already a job in progress, would you like to move this job in Waiting status? Once the current one finishes, this job will start automatically"
                  OnConfirmed="OnJobAlreadyExistingConfirmed"></ConfirmComponent>

@code {
    private List<Jobs> _jobs;
    private bool _confirmJobAlreadyInProgress;
    private Jobs _currentJob;

    protected override async Task OnInitializedAsync()
    {
        _jobPublisher.OnEventPublished += (sender, args) =>
        {
            foreach (var job in _jobs.Where(w => w.JobId == args.Job.JobId))
            {
                job.Status = args.Job.Status;
                job.SourceProcessed = args.Job.SourceProcessed;
                job.DestinationProcessed = args.Job.DestinationProcessed;
            }

            InvokeAsync(StateHasChanged);

            if (args.Job.Status == JobStatus.Completed) //take the next job that is in the queue
            {
                Task.Run(async () =>
                {
                    _jobs = await _repository.FindAsync();
                    var nextJob = _jobs.FirstOrDefault(f => f.Status == JobStatus.Waiting);

                    if (nextJob != null)
                    {
                        await Migrate(nextJob);
                    }
                });
            }
        };

        try
        {
            _jobs = await _repository.FindAsync();
        }
        catch
        {
        }
    }

    public async Task Migrate(Jobs job)
    {
        if (_jobs.Any(a => a.Status == JobStatus.InProgress))
        {
            _confirmJobAlreadyInProgress = true;
            _currentJob = job;
        }
        else
        {
            var redisValue = await _profileRepository.FindByKeyAsync(new RedisData<Profile>()
                {
                    RedisKey = job.JobCategory,
                    RedisValue = job.ProfileId
                });

            var profileToMigrate = JsonConvert.DeserializeObject<Profile>(redisValue);

            await _migrateService.Migrate(profileToMigrate, job);
        }
    }

    public async Task GetLog(Jobs job)
    {
        var profile = JsonConvert.DeserializeObject<Profile>(await _profileRepository.FindByKeyAsync(new RedisData<Profile>()
            {
                RedisKey = job.JobCategory,
                RedisValue = job.ProfileId
            }));

        var log = JsonConvert.DeserializeObject<LogResult>(await _logRepository.FindByKeyAsync(new RedisData<LogResult>()
        {
            RedisValue = "Job:" + job.JobId + "_Operation:" + profile.DataMappings[0].OperationType
        }));

        await _logPublisher.PublishAsync(log);
    }

    private async Task ShowSuccessAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowSuccessAlert", message);
    }

    private async Task OnJobAlreadyExistingConfirmed(bool confirmed)
    {
        _confirmJobAlreadyInProgress = false;

        if (!confirmed) return;

        _currentJob.Waiting();

        await _repository.SaveAsync(new RedisData<Jobs>()
            {
                Data = _currentJob,
                RedisValue = _currentJob.JobId.ToString()
            });

        await ShowSuccessAlert("Job added to wait list");
    }
}