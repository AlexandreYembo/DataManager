@namespace MigrationAdmin.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="plugins/fontawesome-free/css/all.min.css">
    <!-- IonIcons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="dist/css/adminlte.min.css">

    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="../../plugins/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css">

    <link rel="icon" type="image/x-icon" href="/dist/img/cubic-ico.ico">

    <title>DATA MIGRATION MANAGEMENT</title>
</head>
<body class="hold-transition sidebar-mini">
    @RenderBody()
    <!-- jQuery -->
    <script src="plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap -->
    <script src="plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- AdminLTE -->
    <script src="dist/js/adminlte.js"></script>
    <script src="_framework/blazor.server.js"></script>

    <script src="plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="dist/js/diff.js"></script>

    <!-- SweetAlert2 -->
    <script src="../../plugins/sweetalert2/sweetalert2.min.js"></script>

    <script>
        $(function () {
            $("#example1").DataTable({
                "responsive": true, "lengthChange": false, "autoWidth": false,
                "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
            }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');

        });

        function ShowSuccessAlert(message) {
            var Toast = Swal.mixin({
                toast: true,
                position: 'top',
                showConfirmButton: false,
                timer: 9000
            });

            Toast.fire({
                icon: 'success',
                title: message
            });
        }

        function ShowErrorAlert(message) {
            var Toast = Swal.mixin({
                toast: true,
                position: 'top',
                showConfirmButton: false,
                timer: 9000
            });

            Toast.fire({
                icon: 'error',
                title: message
            });
        }

        function UpdatePopEvent(title, html) {
            Swal.fire({
                title: title,
                html: html,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            });
        }

        window.saveAsFile = (fileName, fileContent) => {
            var blob = b64toBlob(fileContent);
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = fileName;
            link.click();
        };

        function b64toBlob(base64) {
            var binaryString = window.atob(base64);
            var len = binaryString.length;
            var bytes = new Uint8Array(len);

            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }

            return new Blob([bytes], { type: 'application/json' });
        }

        window.downloadCsv = function (content, filename) {
            var blob = new Blob([content], { type: 'text/csv' });
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        // diff.js
        // var diffChars = Diff.diffChars();

        function getDiffBefore(element, before, after) {
            before = before ?? '';
            after = after ?? '';

            var diff = Diff.diffChars(before, after);

            if (diff[0].value !== '') {
                var text = '';
                diff.forEach((part) => {
                    text += part.value;
                    // var sanitizedPartValue = this.sanitizer.sanitize(
                    //     SecurityContext.HTML,
                    //     part.value
                    // );
                     if (part.removed) {
                        text +=
                            '<span style="color:darkred; background-color:lightsalmon; font-weight:bold;">' +
                            text +
                            '</span>';
                    } else if (!part.added) text += text;
                });
                element.innerHTML = '<pre>' + text + '</pre>';
            } else {
                element.innerHTML = before;
            }
        };

        function getDiffAfter(element, before, after) {
            before = before ?? '';
            after = after ?? '';

            var diff = Diff.diffChars(before, after);

            if (diff[0].value !== '') {
                var text = '';
                diff.forEach((part) => {
                    text += part.value;
                    // var sanitizedPartValue = this.sanitizer.sanitize(
                    //     SecurityContext.HTML,
                    //     part.value
                    // );
                    if (part.added) {
                        text +=
                            '<span style="color:green; background-color:greenyellow; font-weight:bold;">' +
                            text +
                            '</span>';
                    } else if (!part.removed) text += text;
                });
                element.innerHTML = '<pre>' + text + '</pre>';
            } else {
                element.innerHTML = before;
            }
        };



    </script>

</body>
</html>