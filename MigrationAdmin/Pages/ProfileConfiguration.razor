@page "/profileConfiguration"
@using MigrationAdmin.Models
@using Migration.Repository.Models
@using Migration.Services
@using Migration.Services.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits CustomComponents;
@inject IJSRuntime jsRuntime
@inject IQueryService _queryService;

<div class="card card-default card-tabs">
    <div class="card-header p-0 pt-1">
        <ul class="nav nav-tabs" id="custom-tabs-one-tab" role="tablist">
            <li class="nav-item">
                <a class="nav-link @GetStep("active", 1)" id="custom-tabs-one-database-tab" role="tab" aria-controls="custom-tabs-one-database" aria-selected="true"><i class="nav-icon fas fa-database"></i> Database</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 2)" id="custom-tabs-one-sourceData-tab" role="tab" aria-controls="custom-tabs-one-sourceData" aria-selected="false"><i class="nav-icon fas fa-table"></i> Source</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 3)" id="custom-tabs-one-destinationData-tab" role="tab" aria-controls="custom-tabs-one-destinationData" aria-selected="false"><i class="nav-icon fas fa-table"></i> Destination</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 4)" id="custom-tabs-one-mapping-tab" role="tab" aria-controls="custom-tabs-one-mapping" aria-selected="false"><i class="nav-icon fas fa-map"></i> Mapping</a>
            </li>
            <li class="nav-item">
                <a class="nav-link  @GetStep("active", 5)" id="custom-tabs-one-preview-tab" role="tab" aria-controls="custom-tabs-one-preview" aria-selected="false"><i class="nav-icon fas fa-list"></i> Summary</a>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content" id="custom-tabs-one-tabContent">
            <div class="tab-pane fade  @GetStep("show active", 1)" id="custom-tabs-one-database" role="tabpanel" aria-labelledby="custom-tabs-one-database-tab">
                <ConnectionConfigurationComponent>
                </ConnectionConfigurationComponent>
            </div>
            <div class="tab-pane fade @GetStep("show active", 2)" id="custom-tabs-one-sourceData" role="tabpanel" aria-labelledby="custom-tabs-one-sourceData-tab">
                <DataQueryComponent Title="Configure your Source Data"
                                    OnAggregateDataAdded="AddingSourceAggregateData"></DataQueryComponent>
            </div>
            <div class="tab-pane fade @GetStep("show active", 3)" id="custom-tabs-one-destinationData" role="tabpanel" aria-labelledby="custom-tabs-one-destinationData-tab">
                <DataQueryComponent Title="Configure your Destination Data"
                                    OnAggregateDataAdded="AddingDestinationAggregateData"></DataQueryComponent>
            </div>
            <div class="tab-pane fade @GetStep("show active", 4)" id="custom-tabs-one-mapping" role="tabpanel" aria-labelledby="custom-tabs-one-mapping-tab">
                <div class="card card-default">
                    <div class="card-header">
                        <h3 class="card-title">Configure the mappings for Source and Destination tables</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label>Select what type of mapping do you want to apply to the destination</label>
                                    <select class="form-control" id="dataqueryMappingType" data-keeper-edited="yes" @onchange="ChangeDataQueryMappingType">
                                        @foreach (var type in _dataQueryMappingType)
                                        {
                                            <option value="@type.Value">@type.Key</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">

                                @if (_dataQueryType == DataQueryMappingType.UpdateAnotherCollection)
                                {
                                    <DataMappingDestinationComponent DataMapping="Profile.DataMapping"
                                                                     OnDataMappingChanged="(mappingResult) => _ = mappingResult"></DataMappingDestinationComponent>
                                }
                                else
                                {
                                    <DataMappingSameTableComponent CommandsModel="Profile.DataMapping.Commands"></DataMappingSameTableComponent>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade @GetStep("show active", 5)" id="custom-tabs-one-preview" role="tabpanel" aria-labelledby="custom-tabs-one-preview-tab">
                <div class="card card-default">
                    <div class="card-header">
                        <h3 class="card-title">Configure the mappings for Source and Destination tables</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <table id="dataConfigurationResult" class="table">
                                    <thead>
                                        <tr>
                                            <th>Entity</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (_resultDataFromConfiguration != null)
                                        {
                                            foreach (var data in _resultDataFromConfiguration.GroupBy(g => g.Entity))
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="card collapsed-card">
                                                            <div class="card-header">
                                                                @data.Key
                                                                <div class="card-tools">
                                                                    <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                                                        <i class="fas fa-plus"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                            <div class="card-body">
                                                                <table id="data" class="table">
                                                                    <thead>
                                                                        <tr>
                                                                            <th>Entity</th>
                                                                            <th></th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var values in data)
                                                                        {
                                                                            <tr>
                                                                                <div class="card collapsed-card">
                                                                                    <div class="card-header">
                                                                                        @values.Id
                                                                                        <div class="card-tools">
                                                                                            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                                                                                <i class="fas fa-plus"></i>
                                                                                            </button>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="card-body">
                                                                                        
                                                                                        <td>
                                                                                            @values.Entity
                                                                                </td>
                                                                                <td>
                                                                                            @values.DataType
                                                                                </td>
                                                                                <td>
                                                                                    <pre>
                                                                                                @JValue.Parse(values.Data).ToString(Formatting.Indented) </pre>
                                                                                </td>
                                                                </div>
                                                            </div>
                                                    </tr>
                                                                        }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                </td>
                                </tr>
                                            }
                                        }
                        </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
    </div>
<div class="card-footer">
    <div class="row">
            @if (_step > 1)
            {
            <div class="col-sm-6">
                <button class="btn btn-default" @onclick="() => Previous()"><i class="nav-icon fas fa-step-backward"></i> Previous</button>
            </div>
            }

            @if (_step < 4)
            {
            <div class="col-sm-6">
                <button class="btn btn-default" @onclick="() => Next()"> <i class="nav-icon fas fa-step-forward"></i> Next</button>
            </div>
            }
            else
            {
            <div class="col-sm-6">
                <button class="btn btn-default" @onclick="() => PreviewDataResult()"> <i class="nav-icon fas fa-forward"></i> Next</button>
            </div>
            }
    </div>
</div>
</div>

@if (ShowModalSaveFiles)
{
    <SaveFileConfirmationComponent Data="Profile"
                                   Folder="Profiles"
                                   ModalTitle="Save / Edit the Profile"
                                   TypeOfFile="Profile"
                                   OnConfirmation="() => FileSaved()">
    </SaveFileConfirmationComponent>
}

@if (_showModalDataDifference)
{
    <DataDifferenceModal ShowModalScroll="true"
                         Id="RecordId"
                         ModalOk="ModalOk" DataDifferences="@DataDifference"
                         IsLoading="Loading"></DataDifferenceModal>
}

@code {

    private bool _showModalDataDifference;
    private int _step = 1;

    private Dictionary<string, DataQueryMappingType> _dataQueryMappingType = new()
    {
        {"Update the same collection", DataQueryMappingType.UpdateSameCollection},
        {"Update another collection", DataQueryMappingType.UpdateAnotherCollection}
    };

    private DataQueryMappingType _dataQueryType { get; set; }

    public Profile Profile { get; set; } = new();

    private List<DynamicData> _resultDataFromConfiguration;

    private string _message;

    protected override async Task OnInitializedAsync()
    {
        Profile.DataMapping = new DataMapping();
    }

    private void AddingSourceAggregateData(AggregateData aggregateData)
    {
        Profile.DataMapping.Source.Remove(aggregateData);
        Profile.DataMapping.Source.Add(aggregateData);

    }

    private void AddingDestinationAggregateData(AggregateData aggregateData)
    {
        Profile.DataMapping.Destination.Remove(aggregateData);
        Profile.DataMapping.Destination.Add(aggregateData);
    }

    public async Task ChangeDataQueryMappingType(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        if (Enum.TryParse<DataQueryMappingType>(e.Value.ToString(), out var value))
            _dataQueryType = value;
    }

    private void Previous()
    {
        _step--;
    }

    private void Next()
    {
        _step++;
    }

    public async Task PreviewDataResult()
    {
        _step++;
        Loading = true;

        try
        {
            _resultDataFromConfiguration = await _queryService.Get(Profile.DataMapping, take: 10); //TODO: DataMappings[0] will be a list in the future
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public async Task CompareChanges()
    {
        _showModalDataDifference = true;

        Loading = true;

        try
        {
            DataDifference = new();

            foreach (var data in _resultDataFromConfiguration)
            {
                //    var differences = DifferencesMultipleDestinationsHelper.FindDifferences(Profile.DataMapping, data.Value);

                // if (differences.Any())
                // {
                //     DataDifference = ConcatMethod(DataDifference, differences);
                // }
            }
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public Dictionary<TKey, TValue> ConcatMethod<TKey, TValue>(params Dictionary<TKey, TValue>[] dictionaries)
    {
        var mergedDictionary = dictionaries.Aggregate((dict1, dict2) =>
            dict1.Concat(dict2).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
        return mergedDictionary;
    }

    private async Task FileLoad(string json)
    {
        if (string.IsNullOrEmpty(json)) return;

        Profile = JsonConvert.DeserializeObject<Profile>(json);

        await InvokeAsync(StateHasChanged);
    }

    public void ModalOk()
    {
        _showModalDataDifference = false;
    }


    public async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }

    private string GetStep(string showActive, int step)
    {
        if (_step == step)
            return showActive;

        if (_step == step)
            return showActive;

        return string.Empty;
    }
}