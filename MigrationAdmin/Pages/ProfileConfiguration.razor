@page "/profileConfiguration"
@using MigrationAdmin.Models
@using Migration.Repository.Models
@using Migration.Services
@using Migration.Services.Models
@using Migration.Services.Helpers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits CustomComponents;
@inject IJSRuntime jsRuntime
@inject IQueryService _queryService;

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Select the profile you want to edit</h3>
    </div>
    <div class="card-body">

        <FileSelectorComponent Description="List of Profiles"
                               Path="Profiles"
                               OnFileLoadCallback="(json) => FileLoad(json)"></FileSelectorComponent>
    </div>
</div>

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Configure your migration profile</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-2">
                <div class="form-group">
                    <label>Profile Name</label>
                    <input class="form-control" id="profileName" data-keeper-edited="yes" @bind="@Profile.Name" />
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Profile Description</label>
                    <input class="form-control" id="profileDescription" data-keeper-edited="yes" @bind="@Profile.Description" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3">
                <ConnectionConfigurationComponent>
                </ConnectionConfigurationComponent>
            </div>
            <div class="col-lg-9">
                <table id="dataResult" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mapping in Profile.DataMappings)
                        {
                            <tr>
                                <td>
                                    <DataQueryComponent DataQueryMappingTypeChangedCallback="(dataType) => _dataQueryType = dataType"></DataQueryComponent>

                                    @if (_dataQueryType == DataQueryMappingType.UpdateAnotherCollection)
                                    {
                                        <DataMappingDestinationComponent DataMapping="mapping"
                                                                 OnDataMappingChanged="(mappingResult) => _ = mappingResult"></DataMappingDestinationComponent>
                                    }
                                    else
                                    {
                                        <DataMappingSameTableComponent CommandsModel="mapping.Commands"></DataMappingSameTableComponent>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@if (Loading)
{
    <div class="col-sm-12">
        <Loading />
    </div>
}
<div class="row">
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-success" @onclick="() => PreviewDataResult()"> Preview Data Result</button>
        </div>
    </div>
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-success" @onclick="() => CompareChanges()"> Compare the Changes</button>
        </div>
    </div>
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-warning" @onclick="() => SaveFile()"> Save Profile</button>
        </div>
    </div>
</div>

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Fields to Update</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="dataConfigurationResult" class="table">
                <thead>
                    <tr>
                        <th>Source Id</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_resultDataFromConfiguration != null)
                    {
                        foreach (var data in _resultDataFromConfiguration)
                        {
                            <tr>
                                <td>
                                    <div class="card collapsed-card">
                                        <div class="card-header">
                                            <h3 class="card-title">  @data.Key</h3>
                                            <div class="card-tools">
                                                <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <table id="data" class="table">
                                                <thead>
                                                    <tr>
                                                        <th>Entity</th>
                                                        <th></th>
                                                        <th>Data</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var values in data.Value)
                                                    {
                                                        <tr>
                                                            <td>
                                                                @values.Entity
                                                            </td>
                                                            <td>
                                                                @values.DataType
                                                            </td>
                                                            <td>
                                                                <pre>
                                                                    @JValue.Parse(values.Data).ToString(Formatting.Indented) </pre>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (ShowModalSaveFiles)
{
    <SaveFileConfirmationComponent Data="Profile"
                               Folder="Profiles"
                               ModalTitle="Save / Edit the Profile"
                               TypeOfFile="Profile"
                               OnConfirmation="() => FileSaved()">
    </SaveFileConfirmationComponent>
}

@if (_showModalDataDifference)
{
    <DataDifferenceModal ShowModalScroll="true"
                     Id="RecordId"
                     ModalOk="ModalOk" DataDifferences="@DataDifference"
                     IsLoading="Loading"></DataDifferenceModal>
}

@code {

    private bool _showModalDataDifference;

    private DataQueryMappingType _dataQueryType { get; set; }

    public Profile Profile { get; set; } = new();

    private Dictionary<string, List<DynamicData>> _resultDataFromConfiguration;

    private string _message;

    protected override async Task OnInitializedAsync()
    {
        Profile.DataMappings.Add(new DataMapping()
            {
                Id = 1,
                FieldsMapping = new()
                {
                    new ()
                }
            });
    }

    public async Task PreviewDataResult()
    {
        Loading = true;

        try
        {
            _resultDataFromConfiguration = await _queryService.Get(Profile.DataMappings[0], take: 10); //TODO: DataMappings[0] will be a list in the future
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public async Task CompareChanges()
    {
        _showModalDataDifference = true;

        Loading = true;

        try
        {
            DataDifference = new();

            foreach (var data in _resultDataFromConfiguration)
            {
                var differences = DifferencesMultipleDestinationsHelper.FindDifferences(Profile.DataMappings, data.Value);

                if (differences.Any())
                {
                    DataDifference = ConcatMethod(DataDifference, differences);
                }
            }
        }
        catch (Exception e)
        {
            await ShowErrorAlert(e.Message);
        }

        Loading = false;
    }

    public Dictionary<TKey, TValue> ConcatMethod<TKey, TValue>(params Dictionary<TKey, TValue>[] dictionaries)
    {
        var mergedDictionary = dictionaries.Aggregate((dict1, dict2) =>
            dict1.Concat(dict2).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
        return mergedDictionary;
    }

    private async Task FileLoad(string json)
    {
        if (string.IsNullOrEmpty(json)) return;

        Profile = JsonConvert.DeserializeObject<Profile>(json);

        await InvokeAsync(StateHasChanged);
    }

    public void ModalOk()
    {
        _showModalDataDifference = false;
    }


    public async Task ShowErrorAlert(string message)
    {
        await jsRuntime.InvokeAsync<object>("ShowErrorAlert", message);
    }
}