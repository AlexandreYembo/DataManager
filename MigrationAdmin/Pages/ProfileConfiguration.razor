@page "/profileConfiguration"
@using MigrationAdmin.Models
@using Migration.Repository
@using Migration.Repository.Models
@using Migration.Services
@using Migration.Services.Models
@using Migration.Services.Helpers
@inherits CustomComponents;
@inject IQueryService _queryService;

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Configure your migration profile</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-3">
                <ConnectionConfigurationComponent>
                </ConnectionConfigurationComponent>
            </div>
            <div class="col-lg-9">
                <table id="dataResult" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mapping in DataMappings)
                        {
                            <tr>
                                <td>
                                    <DataQueryComponent DataQueryMappingTypeChangedCallback="(dataType) => _dataQueryType = dataType"></DataQueryComponent>

                                    @if (_dataQueryType == DataQueryMappingType.UpdateAnotherCollection)
                                    {
                                        <DataMappingDestinationComponent DataMapping="mapping"
                                                                 OnDataMappingChanged="(mappingResult) => _ = mappingResult"></DataMappingDestinationComponent>
                                    }
                                    else
                                    {
                                        <DataMappingSameTableComponent CommandsModel="mapping.Commands"></DataMappingSameTableComponent>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
        </div>
    </div>
</div>

<Log LogResult="LogResult" IsLoading="Loading"></Log>

<div class="row">
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-success" @onclick="() => PreviewDataResult()"> Preview Data Result</button>
        </div>
    </div>
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-success" @onclick="() => CompareChanges()"> Compare the Changes</button>
        </div>
    </div>
    <div class="col-sm-3">
        <div class="form-group">
            <button class="btn btn-warning" @onclick="() => SaveFile()"> Save Profile</button>
        </div>
    </div>
</div>

<div class="card card-info">
    <div class="card-header">
        <h3 class="card-title">Fields to Update</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <table id="dataConfigurationResult" class="table">
                <thead>
                    <tr>
                        <th>Container</th>
                        <th>Data</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_resultDataFromConfiguration != null)
                    {
                        foreach (var data in _resultDataFromConfiguration)
                        {
                            <tr>
                                <td>
                                    @data.Key
                                </td>
                                <td>
                                    <table id="data" class="table">
                                        <thead>
                                        <th></th>
                                        </thead>
                                        <tbody>
                                            @foreach (var values in data.Value)
                                            {
                                                <tr>
                                                    <td>
                                                        @values.Data
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (ShowModalSaveFiles)
{
    <SaveFileConfirmationComponent Data="DataMappings"
                               Folder="Profiles"
                               ModalTitle="Save / Edit the Profile"
                               TypeOfFile="Profile"
                               OnConfirmation="() => FileSaved()">
    </SaveFileConfirmationComponent>
}

@if (_showModalDataDifference)
{
    <DataDifferenceModal ShowModalScroll="true"
                         Id="RecordId"
                         ModalOk="ModalOk" DataDifferences="@DataDifference"
                         IsLoading="Loading"></DataDifferenceModal>
}


@code {

    private bool _showModalDataDifference;

    private DataQueryMappingType _dataQueryType { get; set; }

    public List<DataMapping> DataMappings { get; set; } = new();

    private Dictionary<string, List<DynamicData>> _resultDataFromConfiguration;

    protected override async Task OnInitializedAsync()
    {
        DataMappings.Add(new DataMapping()
            {
                Id = 1,
                FieldsMapping = new()
                {
                    new ()
                }
            });
    }

    public async Task PreviewDataResult()
    {
        Loading = true;

        _resultDataFromConfiguration = await _queryService.Get(DataMappings[0], take: 10); //TODO: DataMappings[0] will be a list in the future

        Loading = false;
    }

    public void CompareChanges()
    {
        _showModalDataDifference = true;

        Loading = true;
        DataDifference = new();

        foreach (var data in _resultDataFromConfiguration)
        {
            var differences = DifferencesMultipleDestinationsHelper.FindDifferences(DataMappings, data.Value);

            if (differences.Any())
            {
                DataDifference = ConcatMethod(DataDifference, differences);
            }
        }
        Loading = false;
    }

    public Dictionary<TKey, TValue> ConcatMethod<TKey, TValue>(params Dictionary<TKey, TValue>[] dictionaries)
    {
        var mergedDictionary = dictionaries.Aggregate((dict1, dict2) =>
            dict1.Concat(dict2).ToDictionary(kvp => kvp.Key, kvp => kvp.Value)
            );
        return mergedDictionary;
    }

    
    public void ModalOk()
    {
        _showModalDataDifference = false;
    }
}